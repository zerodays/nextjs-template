/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Cat Fact API
 * An API for facts about cats
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Breed,
  CatFact,
  GetBreedsParams,
  GetFactsParams,
  GetRandomFactParams
} from './model'



/**
 * Returns a a list of breeds
 * @summary Get a list of breeds
 */
export const getBreeds = (
    params?: GetBreedsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Breed[]>> => {
    
    
    return axios.get(
      `https://catfact.ninja/breeds`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetBreedsQueryKey = (params?: GetBreedsParams,) => {
    return [`https://catfact.ninja/breeds`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBreedsQueryOptions = <TData = Awaited<ReturnType<typeof getBreeds>>, TError = AxiosError<unknown>>(params?: GetBreedsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBreedsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBreeds>>> = ({ signal }) => getBreeds(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBreedsQueryResult = NonNullable<Awaited<ReturnType<typeof getBreeds>>>
export type GetBreedsQueryError = AxiosError<unknown>


export function useGetBreeds<TData = Awaited<ReturnType<typeof getBreeds>>, TError = AxiosError<unknown>>(
 params: undefined |  GetBreedsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBreeds>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBreeds<TData = Awaited<ReturnType<typeof getBreeds>>, TError = AxiosError<unknown>>(
 params?: GetBreedsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBreeds>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBreeds<TData = Awaited<ReturnType<typeof getBreeds>>, TError = AxiosError<unknown>>(
 params?: GetBreedsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a list of breeds
 */

export function useGetBreeds<TData = Awaited<ReturnType<typeof getBreeds>>, TError = AxiosError<unknown>>(
 params?: GetBreedsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBreeds>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBreedsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a random fact
 * @summary Get Random Fact
 */
export const getRandomFact = (
    params?: GetRandomFactParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CatFact>> => {
    
    
    return axios.get(
      `https://catfact.ninja/fact`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetRandomFactQueryKey = (params?: GetRandomFactParams,) => {
    return [`https://catfact.ninja/fact`, ...(params ? [params]: [])] as const;
    }

    
export const getGetRandomFactQueryOptions = <TData = Awaited<ReturnType<typeof getRandomFact>>, TError = AxiosError<void>>(params?: GetRandomFactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRandomFactQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRandomFact>>> = ({ signal }) => getRandomFact(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRandomFactQueryResult = NonNullable<Awaited<ReturnType<typeof getRandomFact>>>
export type GetRandomFactQueryError = AxiosError<void>


export function useGetRandomFact<TData = Awaited<ReturnType<typeof getRandomFact>>, TError = AxiosError<void>>(
 params: undefined |  GetRandomFactParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRandomFact>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRandomFact<TData = Awaited<ReturnType<typeof getRandomFact>>, TError = AxiosError<void>>(
 params?: GetRandomFactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRandomFact>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRandomFact<TData = Awaited<ReturnType<typeof getRandomFact>>, TError = AxiosError<void>>(
 params?: GetRandomFactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Random Fact
 */

export function useGetRandomFact<TData = Awaited<ReturnType<typeof getRandomFact>>, TError = AxiosError<void>>(
 params?: GetRandomFactParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRandomFact>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRandomFactQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Returns a a list of facts
 * @summary Get a list of facts
 */
export const getFacts = (
    params?: GetFactsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<CatFact[]>> => {
    
    
    return axios.get(
      `https://catfact.ninja/facts`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetFactsQueryKey = (params?: GetFactsParams,) => {
    return [`https://catfact.ninja/facts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetFactsQueryOptions = <TData = Awaited<ReturnType<typeof getFacts>>, TError = AxiosError<unknown>>(params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFactsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFacts>>> = ({ signal }) => getFacts(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFactsQueryResult = NonNullable<Awaited<ReturnType<typeof getFacts>>>
export type GetFactsQueryError = AxiosError<unknown>


export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = AxiosError<unknown>>(
 params: undefined |  GetFactsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = AxiosError<unknown>>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFacts>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = AxiosError<unknown>>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a list of facts
 */

export function useGetFacts<TData = Awaited<ReturnType<typeof getFacts>>, TError = AxiosError<unknown>>(
 params?: GetFactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFacts>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFactsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




