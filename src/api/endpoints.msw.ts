/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * Cat Fact API
 * An API for facts about cats
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  Breed,
  CatFact
} from './model'

export const getGetBreedsResponseMock = (): Breed[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({breed: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), country: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), origin: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), coat: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), pattern: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})))

export const getGetRandomFactResponseMock = (overrideResponse: Partial< CatFact > = {}): CatFact => ({fact: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getGetFactsResponseMock = (): CatFact[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({fact: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), length: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))


export const getGetBreedsMockHandler = (overrideResponse?: Breed[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Breed[]> | Breed[])) => {
  return http.get('*/breeds', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetBreedsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetRandomFactMockHandler = (overrideResponse?: CatFact | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CatFact> | CatFact)) => {
  return http.get('*/fact', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetRandomFactResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetFactsMockHandler = (overrideResponse?: CatFact[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CatFact[]> | CatFact[])) => {
  return http.get('*/facts', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetFactsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getCatFactAPIMock = () => [
  getGetBreedsMockHandler(),
  getGetRandomFactMockHandler(),
  getGetFactsMockHandler()
]
